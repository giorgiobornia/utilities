From: <Salvato con Microsoft Internet Explorer 5>
Subject: Esercitazioni
Date: Tue, 22 Jun 2004 03:19:03 +0200
MIME-Version: 1.0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://xoomer.virgilio.it/roberto-ricci/C/Es10.htm
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2800.1409

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Esercitazioni</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3D"MSHTML 6.00.2800.1400" name=3DGENERATOR></HEAD>
<BODY>
<CENTER>
<H1 style=3D"BACKGROUND: teal; COLOR: white">FILES</H1></CENTER>
<HR style=3D"COLOR: blue">

<CENTER><FONT face=3DArial size=3D1>pagine di <A=20
href=3D"mailto:roberto_ricci@tin.it"><I>Roberto Ricci </I></A>L.S. =
"<I>A.=20
Righi</I>", Bologna. Ultima revisione
<SCRIPT language=3DJavaScript>=0A=
<!--=0A=
=0A=
function SymError()=0A=
{=0A=
  return true;=0A=
}=0A=
=0A=
window.onerror =3D SymError;=0A=
=0A=
var SymRealWinOpen =3D window.open;=0A=
=0A=
function SymWinOpen(url, name, attributes)=0A=
{=0A=
  return (new Object());=0A=
}=0A=
=0A=
window.open =3D SymWinOpen;=0A=
=0A=
//-->=0A=
</SCRIPT>

<SCRIPT language=3DJavascript>
document.write(document.lastModified)
</SCRIPT>
 </FONT></CENTER>
<HR style=3D"COLOR: blue">

<UL>
  <LI><A =
href=3D"http://xoomer.virgilio.it/roberto-ricci/C/Es0.htm">INDICE</A>=20
  <LI>
  <OL>
    <LI><A =
href=3D"http://xoomer.virgilio.it/roberto-ricci/C/Es10.htm#binari">File=20
    binari</A>=20
    <LI><A =
href=3D"http://xoomer.virgilio.it/roberto-ricci/C/Es10.htm#testo">File=20
    testo</A>=20
    <LI><A=20
    =
href=3D"http://xoomer.virgilio.it/roberto-ricci/C/Es10.htm#strutture">Str=
utture</A>=20
    </LI></OL>
  <LI><A =
href=3D"http://xoomer.virgilio.it/roberto-ricci/C/Es10.zip">Soluzioni=20
  proposte</A> </LI></UL><BR>&nbsp; <BR>&nbsp; <BR>&nbsp; <BR>&nbsp;=20
<H3 style=3D"BACKGROUND: teal; COLOR: white"><A name=3Dbinari></A>File=20
binari</H3><BR>&nbsp; Un file binario =E8 un flusso di byte, una =
sequenza di unit=E0=20
d'informazione non interpretate, che quindi possono rappresentare =
qualunque=20
informazione (testi, numeri, immagini...).<BR>Nel file stdio.h sono =
dichiarate=20
in particolare le function: <PRE style=3D"BACKGROUND: lime">fopen()      =
       	Apre il file                                              =20
fclose()            	Chiude il file
fread()   		Legge dal file
fwrite()                Scrive sul file =20
fgetc()                 Legge il prossimo byte del file
fputc()                 Scrive un carattere nel file  =20
fread()                 Legge un certo numero di gruppi adiacenti di =
byte del file
fwrite()                Scrive un certo numero di gruppi adiacenti di =
byte del file  =20
fseek()                 Scorre lungo il file
ftell()                 restituisce la posizione attuale nel file        =

</PRE>Tra queste, per aprire il file che ha nome <I>nomefile</I> da =
associare a=20
un flusso di dati, <PRE style=3D"BACKGROUND: yellow">FILE *fopen(char =
*<I>nomefile</I>, char *<I>mode</I>);
</PRE>in cui la stringa <I>mode</I> pu=F2 avere i seguenti valori: <PRE =
style=3D"BACKGROUND: lime">                                 =20
"rb"                Apre un file binario per la lettura                  =
           =20
"wb"                Crea un file binario per la scrittura                =
           =20
"ab"                Appende a un file binario                            =
        =20
"r+b"               Apre un file binario per la lettura/scrittura        =
                  =20
"w+b"               Crea un file binario per la lettura/scrittura        =
                =20
"a+b"               Apre o crea un file binario per la lettura/scrittura =
               =20
</PRE>Su un file =E8 possibile scrivere informazione mediante: <PRE =
style=3D"BACKGROUND: yellow">int fwrite(<I>nomevariabile</I>, int =
<I>dimensione</I>, int <I>numero elementi</I>, FILE *<I>nomefile</I>);
</PRE>per scrivere dal file un certo numero di elementi di dimensione =
dichiarata=20
in byte a partire dall'indirizzo della variabile indicata. Restituisce =
il numero=20
di elementi (non di byte) effettivamente scritti, eventualmente meno di =
n se il=20
file finisce prima.=20
<OL>
  <LI>Redigere ed eseguire il programma seguente per creare =
eventualmente e=20
  aprire un file binario e scrivervi un vettore di 10 numeri interi <PRE =
style=3D"BACKGROUND: silver">#include &lt;stdio.h&gt;

main(){
	FILE *fp;		// Dichiara una variabile del tipo flusso d'informazione
	fp =3D fopen ("a:numeri.dat", "wb");	// Associa a tale flusso un file =
su disco
	if (fp =3D=3D NULL){
		printf ("errore di apertura \n");
	}else{
		int vet[13] =3D {1,2,3,4,5,6,7,8,9,10,11,12,13};
		fwrite (vet, sizeof(int), 13, fp);
		fclose(fp);
	}
}
</PRE>
  <LI>Visualizzare l'elenco dei file presenti sul disk <TT>A:</TT> =
controllando=20
  che tra questi compaia <TT>numeri.dat</TT>=20
  <LI>Aprire con il Blocco note il file <TT>numeri.dat</TT> (<TT>[Tasto =
destro=20
  del mouse]Nuovo|Documento di testo</TT> e trascinare sul foglio vuoto =
l'icona=20
  di <TT>numeri.dat</TT>) verificandone l'illegibilit=E0=20
  <LI>Redigere ed eseguire il programma seguente per leggere il file =
binario=20
  <TT>numeri.dat</TT> mediante la function <PRE style=3D"BACKGROUND: =
yellow">int fread(&amp;<I>nomevariabile</I>, int <I>dimensione</I>, int =
<I>numero elementi</I>, FILE *<I>nomefile</I>);
</PRE>per leggere dal file un certo numero di elementi di dimensione=20
  dichiarata in byte componenti la variabile della quale viene indicato=20
  l'indirizzo. Restituisce il numero di elementi (non di byte) =
effettivamente=20
  letti, eventualmente meno di n se il file finisce prima. <PRE =
style=3D"BACKGROUND: silver">#include &lt;stdio.h&gt;

main(){
	FILE *fp;
	fp =3D fopen ("a:numeri.dat", "rb");
	if (fp =3D=3D NULL){
		printf ("errore di apertura \n");
	}else{
		int vett[100];
		int i=3D0;
		while(fread(&amp;vett[i],sizeof(int),1,fp)&gt;0){
		  printf("%d\n",vett[i]);
		}
		fclose(fp);
	}
}
</PRE>
  <LI>Modificare i precedenti programmi in modo che il file dei dati si=20
  riferisca a tipi float=20
  <LI>Modificare i precedenti programmi in modo che si debba dichiarare =
il tipo=20
  di dato=20
  <LI>Realizzare un programma che proponga un menu: crea, leggi, =
cancella,=20
  aggiungi dati (da inserire da tastiera) </LI></OL><BR>&nbsp; =
<BR>&nbsp;=20
<BR>&nbsp;=20
<H3 style=3D"BACKGROUND: teal; COLOR: white"><A name=3Dtesto></A>File=20
testo</H3><BR>&nbsp; I file binari sono sufficienti a qualunque scopo. =
Tuttavia,=20
per la gestione di sequenze di caratteri, viene offerta una grande =
comodit=E0,=20
quella dei file di testo. Infatti nei file di testo=20
<UL>
  <LI>esiste un concetto di riga e di fine riga (=91\n=92)=20
  <LI>certi caratteri sono stampabili a video=20
  <LI>la sequenza di caratteri =E8 chiusa dal carattere speciale EOF =
(Per generare=20
  EOF sulle piattaforme PC basta combinare i tasti [Ctrl]+Z). =
</LI></UL>L'apertura=20
e la chiusura dei file si fanno come gi=E0 visto, cambia solo per =
l'apertura la=20
stringa <I>mode</I>, che in questo caso pu=F2 avere i valori: <PRE =
style=3D"BACKGROUND: lime">                                              =
 =20
"r"                 Apre un file testo per la lettura                    =
           =20
"w"                 Crea un file testo per la scrittura                  =
           =20
"a"                 Appende a un file testo                              =
         =20
"r+"                Apre un file testo per la lettura/scrittura          =
                  =20
"w+"                Crea un file testo per la lettura/scrittura          =
                =20
"a+"                Apre o crea un file testo per la lettura/scrittura   =
               =20
"rt"                Apre un file testo per la lettura                    =
           =20
"wt"                Crea un file testo per la scrittura                  =
           =20
"at"                Appende a un file testo                              =
        =20
"r+t"               Apre un file testo per la lettura/scrittura          =
                  =20
"w+t"               Crea un file testo per la lettura/scrittura          =
                =20
"a+t"               Apre o crea un file testo per la lettura/scrittura   =
               =20
</PRE>I canali di I/O standard non sono altro che file di testo gi=E0 =
aperti:=20
<UL>
  <LI>stdin =E8 un file di testo aperto in lettura, di norma agganciato =
alla=20
  tastiera;=20
  <LI>stdout =E8 un file di testo aperto in scrittura, di norma =
agganciato al=20
  video;=20
  <LI>stderr =E8 un altro file di testo aperto in scrittura, di norma =
agganciato=20
  al video. </LI></UL>Le funzioni di I/O disponibili per i file di testo =
sono una=20
generalizzazione di quelle gi=E0 note per i canali di I/O =
standard.<BR>Nel file=20
stdio.h sono dichiarate in particolare le function: <PRE =
style=3D"BACKGROUND: lime">                                            =20
    da console 				da file                            =20

int getchar(void); 		int fgetc(FILE* f);                        =20
int putchar(int c); 		int fputc(int c, FILE* f);
char* gets(char* s); 		char* fgets(char* s, int n, FILE* f);
int puts(char* s); 		int fputs(char* s, FILE* f);
int printf( ... ); 		int fprintf(FILE* f, ... );
int scanf( ... ); 		int fscanf(FILE* f, ... );
</PRE>
<OL>
  <LI>Redigere ed eseguire il seguente programma per salvare su un file =
di testo=20
  ci=F2 che viene battuto sulla tastiera (utilizzare la combinazione di =
tasti=20
  [Ctrl]+Z per terminare l'immissione dei dati). <PRE =
style=3D"BACKGROUND: silver">#include &lt;stdio.h&gt;

main(){
	FILE *fp;
	fp =3D fopen ("a:testo.txt", "wt");
	char car;
	if (fp !=3D NULL){
		car=3Dgetchar();
		while (car!=3DEOF){
			putc(car, fp);
			car=3Dgetchar();
		}
		fclose(fp);
	}else{
		printf ("errore di apertura del file in scrittura");
	}
}
</PRE>
  <LI>Visualizzare l'elenco dei file presenti sul disk <TT>A:</TT> =
controllando=20
  che tra questi compaia <TT>testo.txt</TT>=20
  <LI>Leggere il contenuto di <TT>testo.txt</TT>=20
  <LI>Modificare tale file testo con gli strumenti di editoria del =
Blocco note=20
  <LI>Redigere ed eseguire il seguente programma per stampare a video il =

  contenuto di un file testo <PRE style=3D"BACKGROUND: silver">#include =
&lt;stdio.h&gt;

main(){
		FILE *fp;
		int car;
		fp =3D fopen ("a:testo.txt", "rt");
		if (fp !=3D NULL){
			do{
				car=3Dgetc(fp);
				putchar(car);
			}while (car!=3DEOF);
			fclose(fp);
		}else{
			printf ("errore di apertura del file in lettura");
		}
}</PRE>
  <LI>Scorrere un file, ovvero riposizionare il 'file pointer' in uno =
stream,=20
  mediante la function <PRE style=3D"BACKGROUND: yellow">int fseek(FILE =
*<I>nomefile</I>, long <I>numero</I>, int <I>opzione</I>);
</PRE>la nuova posizione =E8 un certo <I>numero</I> di byte dalla =
collocazione=20
  iniziale fissata dall'<I>opzione</I> tra le seguenti possibili: =
<PRE>Costante 	opzione		Collocazione iniziale

SEEK_SET	0		inizio File
SEEK_CUR	1		posizione corrente
SEEK_END	2		End-of-file
</PRE>che restituisce il valore 0 se l'azione ha successo, un valore non =
nullo=20
  atrimenti. <PRE style=3D"BACKGROUND: silver">#include &lt;stdio.h&gt;

main(){
		FILE *fp;
		char car;
		fp =3D fopen ("a:testo.txt", "r+");
		if (fp !=3D NULL){
			do
				car=3Dfgetc(fp);
			while (car!=3D'a');
			fseek(fp,-1,SEEK_CUR);
			fputc('X',fp);
			fclose(fp);
		}else{
			printf ("errore di apertura del file in lettura/scrittura");
		}
}
</PRE>
  <LI>Modificare il precedente programma in modo da sostituire tutte le=20
  occorrenze di una dato carattere con un altro carattere dato.=20
  <LI>Per ottenere la posizione raggiunta all'interno del file, il file =
pointer=20
  corrente, si pu=F2 usare la function: <PRE style=3D"BACKGROUND: =
yellow">long int ftell(FILE *stream);
</PRE>Tale posizione =E8 il n=B0 di bytes dall'inizio del file oppure =
-1L in caso=20
  di errore.<BR>Redigere ed eseguire il seguente programma che =
restituisce la=20
  lunghezza, in byte, di un file <PRE style=3D"BACKGROUND: =
silver">#include &lt;stdio.h&gt;

main(){
		FILE *fp;
		fp =3D fopen ("a:testo.txt", "rt");
		if (fp !=3D NULL){
			fseek(fp,0L,SEEK_END);
			printf ("numero di caratteri del file: %ld",ftell(fp));
			fclose(fp);
		}else{
			printf ("errore di apertura del file in lettura");
		}
}
</PRE>
  <LI>Modificare il programma per la lettura di un file di testo in modo =
da=20
  richiedere in input il nome del file.=20
  <LI>Realizzare un programma che verifichi se una certa parola =E8 =
contenuta in=20
  un file di testo. </LI></OL><BR>&nbsp; <BR>&nbsp; <BR>&nbsp;=20
<H3 style=3D"BACKGROUND: teal; COLOR: white"><A=20
name=3Dstrutture></A>Strutture</H3><BR>&nbsp; Oltre ai tipi di dato=20
<U>semplici</U>, predefiniti come <TT><B>int</TT></B>, =
<TT><B>char</TT></B>,=20
<TT><B>float</TT></B>, <TT><B>double</TT></B>, ... ( ma anche definibili =

dall'utente con il costruttore 'enum') vi sono altri tipi di dato,=20
<U>strutturati</U> come quelli che si ottengono mediante il costruttore=20
<TT><B>[]</TT></B> (array), definiti con il costruttore =
<TT><B>struct</TT></B>. <PRE style=3D"BACKGROUND: yellow"><FONT =
color=3Dred size=3D+1>struct</FONT> <I>nomeStruttura</I> <FONT =
color=3Dred size=3D+1>{</FONT>
	<I> definizione di componente </I><FONT color=3Dred size=3D+1>;</FONT>
	<I> definizione di componente </I><FONT color=3Dred size=3D+1>;</FONT>
	 ..........
	<I> definizione di componente </I><FONT color=3Dred size=3D+1>;</FONT>
<FONT color=3Dred size=3D+1>};</FONT>
</PRE>Ad esempio per definire la struttura: <PRE>struct persona {
	char cognome[20];
	char nome[20];
	char sesso:
	int anno;
};
</PRE>oppure per definire un identificatore di tipo di dato strutturato: =
<PRE>=20
typedef struct {
 	float x;
 	float y;
 	float z;
} punto;
</PRE>mentre per dichiarare variabili di quel tipo: <PRE>struct persona =
tizio=3D{"mario", "rossi", 50};
struct persona caio;
caio=3D{"pippo", "bianchi", 3};
punto P=3D{0,1,0};
</PRE>Una volta definita una variabile strutturata, si accede ai singoli =
campi=20
mediante la notazione puntata. Ad esempio: <PRE>media=3D(caio.eta + =
tizio.eta)/2;
somma=3DP.x + P.y + P.z;
P.x=3D0;
</PRE>
<OL>
  <LI>Redigere ed eseguire il seguente programma per aggiungere altri =
dati in un=20
  file <TT>a:archivio.txt</TT> gi=E0 contenente i dati: <PRE>Rossi =
Bianca F 1947
Bianchi Viola F 1982
Violetti Azzurra F 1976
Azzurri Celestino M 1988
Celesti Rosa F 2000
</PRE>. <PRE style=3D"BACKGROUND: silver">#include &lt;stdio.h&gt;

typedef struct{
	char cognome[20];
	char nome[20];
	char sesso;
	int anno;
} persona;

main(){
	FILE *fp;
	fp =3D fopen ("a:archivio.txt", "at");
	persona p;
	if (fp =3D=3D NULL){
		printf ("errore di apertura \n");
	}else{
		int si=3D1;
		do{
			printf("\nCognome:  "); scanf("%s",&amp;p.cognome);
			printf("\nNome:  "); scanf("%s",&amp;p.nome);
			printf("\nSesso:  "); scanf("%s",&amp;p.sesso);
			printf("\nAnno:  "); scanf("%d",&amp;p.anno);
			fprintf (fp, "\n%s %s %c %d",p.cognome, p.nome, p.sesso, p.anno);
			printf("\nAncora dati da inserire? (1=3Dsi 0=3Dno)  "); =
scanf("%d",&amp;si);
		}while (si);
		fclose(fp);
	}
}
</PRE>
  <LI>Scrivere un programma che cerchi nell'archivio se vi sono persone =
con un=20
  dato cognome=20
  <LI>A differenza di quanto accade con gli array, il nome della =
struttura=20
  rappresenta la struttura nel suo complesso. Quindi si possono fare=20
  assegnazioni tra strutture o realizzare function che hanno per valore =
una=20
  struttura; si pu=F2 inoltre passare una struttura come parametro a una =
funzione=20
  (passaggio per valore).<BR>Completare il programma seguente per le=20
  trasformazioni nel piano. <PRE style=3D"BACKGROUND: silver">#include =
&lt;stdio.h&gt;

typedef struct {float x, y;} punto;	\\ di coordinate (x;y)
typedef struct {float a, b, c;} retta; \\ di equazione ax+by+c=3D0

punto traslaz(punto, punto);
punto simm(punto,punto);
punto simmAss(punto,retta);
punto rotaz(punto,punto,float);

punto leggiPto();
retta leggiRetta();

main(){=20
	punto P=3DleggiPto();
	unsigned int op;
	printf("\nTrasformazioni:\n1: traslazione;2\n simmetria centrale;");
	printf("\n3 simmetria assiale:\n4: rotazione;\n\n scelta ?");
	scanf("%d",&amp;op);
	switch (op){
	case1 : 	printf ("Corrispondente di O(0,0) nella traslazione ?");
			punto T=3DleggiPto();
			P=3Dtraslaz(P,T);
			break;
	case2 : 	printf ("Centro di simmetria ?");
			punto S=3DleggiPto();
			P=3Dsimm(P,S);
			break;
	case3 : 	printf ("Asse di simmetria ?");
			asse=3DleggiRetta();
			P=3DsimmAss(P,asse)
			break;
	case4 : 	printf ("Centro di rotazione ?");
			punto C=3DleggiPto();
			printf ("\nAngolo di rotazione (rad)?");
			float ang;
			scanf("%f",&amp;ang);
			P=3Drotaz(P,C,ang);
			break;
	default: ;
	}
	printf("\n\nLe nuove coordinate sono x =3D %f e y =3D %f,P.x,P.y);
}

punto leggiPto(){
	punto P;
	printf ("x =3D ");  scanf("%f",&amp;P.x);
	printf ("y =3D ");  scanf("%f",&amp;P.y);
	return P
}

punto traslaz(punto P, punto T){
		P.x =3D P.x + T.x;
		P.y =3D P.y + T.y;
		return P
}

punto simm(punto P, punto S){
		P.x =3D 2*S.x - P.x;
		P.y =3D 2*S.y - P.y;
		return P
}
</PRE>
  <HR style=3D"COLOR: blue">

  <CENTER><FONT face=3DArial size=3D1>pagine di <A=20
  href=3D"mailto:roberto_ricci@tin.it"><I>Roberto Ricci </I></A>L.S. =
"<I>A.=20
  Righi</I>", Bologna. Ultima revisione
  <SCRIPT language=3DJavascript>
document.write(document.lastModified)
</SCRIPT>
   </FONT></CENTER>
  <HR style=3D"COLOR: blue">

  <SCRIPT language=3DJavaScript>=0A=
<!--=0A=
var SymRealOnLoad;=0A=
var SymRealOnUnload;=0A=
=0A=
function SymOnUnload()=0A=
{=0A=
  window.open =3D SymWinOpen;=0A=
  if(SymRealOnUnload !=3D null)=0A=
     SymRealOnUnload();=0A=
}=0A=
=0A=
function SymOnLoad()=0A=
{=0A=
  if(SymRealOnLoad !=3D null)=0A=
     SymRealOnLoad();=0A=
  window.open =3D SymRealWinOpen;=0A=
  SymRealOnUnload =3D window.onunload;=0A=
  window.onunload =3D SymOnUnload;=0A=
}=0A=
=0A=
SymRealOnLoad =3D window.onload;=0A=
window.onload =3D SymOnLoad;=0A=
=0A=
//-->=0A=
</SCRIPT>
  </LI></OL></BODY></HTML>
